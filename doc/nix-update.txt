*nix-update.txt*           For NVIM v0.8.0          Last change: 2024 April 10

==============================================================================
Table of Contents                               *nix-update-table-of-contents*

  - Installation                                     |nix-update-installation|
  - Configuration                                   |nix-update-configuration|
  - Usage                                                   |nix-update-usage|
  - Development                                       |nix-update-development|
  - TODO                                                     |nix-update-todo|
  - Credits                                               |nix-update-credits|


INSTALLATION                                         *nix-update-installation*


REQUIREMENTS ~

- nvim `v0.9`
- **[Optional]** `nix-prefetch-url` <https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/fetchgit/nix-prefetch-git> (and possibly more, checkout the included prefetchers here <./fnl/nix-update/prefetchers.fnl>)


LAZY.NVIM

>lua
    {
        "reo101/nix-update.nvim",
        dependencies = {
            -- None (yet), but could use those
            -- "nvim-lua/plenary.nvim",
            -- "nvim-telescope/telescope.nvim",
        }
        config = function()
            require("nix-update").setup()
        end,
    }
<


CONFIGURATION                                       *nix-update-configuration*

Lua init file:

>lua
    require("nix-update").setup(opts)
<

This `setup` function accepts the following table:

>lua
    require("nix-update").setup({
      -- Extra prefetcher commands
      -- table of tables, where each one looks like this:
      extra_prefetcher_cmds = {
        ["myFetch"] = {
          -- (array of strings) Array of required system commands
          ["required-cmds"] = { "cmd1", "cmd2" },
          -- (array of strings) Array of required "fetch" keys
          ["required-keys"] = { "repo", "user" },
          -- (function) Function to run to generate a command
          ["prefetcher"] = function(opts)
            -- guaranteed to be non-nil
            local repo = opts.repo
            local user = opts.user
            -- extra (nonrequired/optional) keys, could be nil
            local submodules = opts.submodules
    
            -- has to return a table of `cmd` and `opts`
            return {
              cmd = "cmd1",
              args = {
                "wrapped_run",
                "--",
                "cmd2",
                repo .. "/" .. user,
              },
            }
          end,
          -- (function) Function to run to extract the new data
          ["extractor"] = function(stdout)
            -- array of lines from funning the corresponding command
            local first_line = stdout[1]
    
            -- has to return a table with new value for the keys
            return {
              version = "v." .. first_line
            }
          end,
        },
      },
    })
<

**NOTES:** - The table is empty by default - `required-cmds` and
`required-keys` are optional - You can override the builtin definitions by
using the same name in `extra`


USAGE                                                       *nix-update-usage*

Bind `prefetch_fetch` to a keymap:

>lua
    -- <leader> -> Nix update -> under Cursor
    vim.keymap.set("n", "<leader>nc", require("nix-update").prefetch_fetch)
<

Run it in a `Nix` file with the cursor inside a fetch:

>nix
    let
      pname = "vim-fmi-cli";
      version = "0.2.0";
    in {
      src = fetchFromGitHub {
        owner = "AndrewRadev";
        repo = pname;
        rev = "v${version}";
        sha256 = "sha256-SOMEOUTDATEDHASH";
      };
    }
<

And `nix-update` will statically evaluate all string arguments to the fetch
(string literals and interpolations), precalculate the correct hash and
substitute it in the right place.

>nix
    let
      pname = "vim-fmi-cli";
      version = "0.2.0";
    in {
      src = fetchFromGitHub {
        owner = "AndrewRadev";
        repo = pname;
        rev = "v${version}";
        sha256 = "sha256-RAlvDiNvDVRNtex0aD8WESc4R/mAr7FjWtgzHWa4ZSI=";
      };
    }
<

This updating mechanism allows for some pretty wild stuff, like this:

>nix
    let
      pname = "vim-fmi-cli";
      version = "0.2.0";
      type = "256";
    in rec {
      hash = "SOMEOUTDATEDHASH";
    
      src = fetchFromGitHub {
        owner = "AndrewRadev";
        repo = pname;
        rev = "v${version}";
        inherit sha256;
      };
    
      sha256 = "sha${type}-${hash}";
    }
<

Running `prefetch_fetch` on this will figure out how to construct the current
value of `sha256` AND skip the common prefix when updating it, i.e.Â the
`sha256-` part (consisting of the string `sha`, the value of `type`, a `-` and
finally the value of `hash`, which are all scattered around `let`s and `rec`s)
and only update the `hash` variable to the correct suffix of the new `sha256`:

>nix
    let
      pname = "vim-fmi-cli";
      version = "0.2.0";
      type = "256";
    in rec {
      hash = "RAlvDiNvDVRNtex0aD8WESc4R/mAr7FjWtgzHWa4ZSI=";
    
      src = fetchFromGitHub {
        owner = "AndrewRadev";
        repo = pname;
        rev = "v${version}";
        inherit sha256;
      };
    
      sha256 = "sha${type}-${hash}";
    }
<

Iâ€™m not really sure how often would this be of help but itâ€™s cool to have
it nonetheless. ðŸ˜„


DEVELOPMENT                                           *nix-update-development*

The `lua` folder is the compilation output of all files from the `fnl`
directory. This is done using this `Makefile` <./Makefile>:

>bash
    make
<

You can clear the compilation output (the `lua` folder) using the `clean`
subcommand:

>bash
    make clean
<

**NOTES:** - You have to have `fennel` (version `1.2.0`) in your `$PATH`

Currently, there arenâ€™t any strict style guidelines being followed, except
the ones derived from using Parinfer <https://shaunlebron.github.io/parinfer>
(through parinfer-rust <https://github.com/eraserhd/parinfer-rust>)


TODO                                                         *nix-update-todo*

- More commands
- More prefetchers
- Simpler prefetch commands (not just system ones, maybe lua functions)
- Style guidelines (with optional enforcement)
- Telescope pickers for selective updating
- Use `plenary.nvim` for running async commands instead of hand-rolled solution


CREDITS                                                   *nix-update-credits*

- Original inspiration: <https://github.com/jwiegley/nix-update-el>
- The Fennel language: <https://fennel-lang.org>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
